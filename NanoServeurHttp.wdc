#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : NanoServeurHttp
 major_version : 28
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x13c3c32c00178112
 internal_properties : CAAAAAgAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1-
      NanoServeurHttp est une Classe
      PUBLIQUE
      	// appelée pour chaque requet
      	eve_avant_chaque_requete est une procédure
      	// appelée si aucune uri ne correpond 
      	eve_requete_non_traitée est une procédure
      	// appelée si une requete invalide est recue
      	eve_requete_invalide est une procédure
      	
      	duree_max_lecture_requete est une durée
      		
      privé
      	// n° de port pour accéder au serveur
      	numéro_de__port	est entier	= 8080
      	socket_attente_connexion est chaine	
      	est_démarré est un booléen
      	thread_attente_connexion est chaine
      	// callback par uri
      	tab_eve_uri est un tableau associatif de procédure	
      	// callback par uri
      	tab_repertoire_virtuel est un tableau de RépertoireVirtuel
      	
      	
      	stop_thread est un booléen
      
      fin
      
      OPTION_url_racine est Enumération
      	NomDeLaMachaine // ex
      	Ipv4
      	IPv6
      	Localhost
      fin
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1424196500926791954
     type_code : 27
     code : |1+
      procédure Constructeur()
      :duree_max_lecture_requete = 3s
     type : 589824
   -
     name : Destructeur
     procedure_id : 1424196500926857490
     type_code : 28
     code : |1+
      procédure Destructeur()
      
      stop_serveur()
     type : 655360
   -
     name : ajoute_traitement_uri
     procedure_id : 1424518571950257774
     type_code : 12
     code : |1+
      // ajouter une procédure a appeler sir une ur est demandée 
      procédure ajoute_traitement_uri( local uri est chaine ansi, procédure_si_uri est procédure )
      
      tab_eve_uri[uri] = procédure_si_uri
     type : 458752
   -
     name : ajoute_répertoire_virtuel
     procedure_id : 1424521750227713881
     type_code : 12
     code : |1-
      procédure ajoute_répertoire_virtuel( LOCAL uri est chaine ansi, répertoire_local est une chaîne ANSI )
      
      repertoire_virtuel est RépertoireVirtuel
      repertoire_virtuel.Init(uri,répertoire_local)
      tab_repertoire_virtuel.Ajoute(repertoire_virtuel)
     type : 458752
   -
     name : démarre_serveur
     procedure_id : 1424196500926923026
     type_code : 12
     code : |1+
      
      // lancer le serveur sur un port
      // acces par
      // http://localhost:8080/
      PROCÉDURE PUBLIQUE démarre_serveur( num_port est entier = 8080 ) : (booléen, chaîne)
      
      // si déja lancé
      SI :est_démarré ALORS
      	RENVOYER (faux,"Serveur déjà démarré")
      FIN
      
      // créer un nom unique
      :socket_attente_connexion	= "socket_" + DonneGUID(guidBrut)
      :thread_attente_connexion	= "thread_" + :socket_attente_connexion
      // création de la coket d'atten de connection
      SI SocketCrée(:socket_attente_connexion, num_port) = Faux ALORS
      	// echec
      	RENVOYER (Faux, erreurinfo())
      FIN
      :numéro_de__port = num_port
      
      // lancement du thread d'attente de connexions client
      :stop_thread = Faux
      ThreadExécute(thread_attente_connexion, threadSécurisé, _attente_connexion)
      PROCÉDURE interne _attente_connexion
      	// boucle sans fin en attente de connexions
      	tantque pas stop_thread
      		SI SocketAttendConnexion(:socket_attente_connexion,10ms)  ALORS
      			// crée un canal de communication
      			canal_http est chaine = SocketAccepte(:socket_attente_connexion)
      			// traite la requete dans un thread dédié
      			// => _traite_une_requete_http( canal_http  )
      			nom_thread est chaine = "T" + canal_http
      			ThreadExécute( nom_thread,threadSécurisé, _traite_une_requete_http, canal_http)
      		fin
      	FIN
      	SocketFerme(:socket_attente_connexion)
      fin
      
      // succès
      :est_démarré = vrai
      renvoyer (vrai,"")
     type : 458752
   -
     name : stop_serveur
     procedure_id : 1424903963666538508
     type_code : 12
     code : |1+
      procédure stop_serveur()
      
      // si pas lancé on ne fait rien
      SI pas :est_démarré ALORS
      	retour
      FIN
      
      // demande au thread qui fait de SocketAttendConnexion() de se terminer
      :stop_thread = vrai
      TANTQUE ThreadEtat(thread_attente_connexion)=threadEncours
      	Temporisation(10,tempoRien)
      FIN
      :stop_thread = Faux
      
      :socket_attente_connexion=""
      :est_démarré= Faux
     type : 458752
   -
     name : _traite_une_requete_http
     procedure_id : 1424196500926988562
     type_code : 12
     code : |1+
      // gestion d'une reuête htpp vi la socket de communication <canal_http>
      procédure privée _traite_une_requete_http( canal_http )
      
      // réponse
      réponse est ReponseHttp(canal_http)
      
      // lecture de la requête
      buffer_req_http est un chaine ansi 
      duree_lecture est une durée
      (buffer_req_http,duree_lecture) = _lit_requete_brute(canal_http, :duree_max_lecture_requete)
      SI buffer_req_http=""  ALORS
      	// Erreur
      	réponse.envoie_erreur_400_bad_request()
      	retour
      FIN
      
      // décoder la requete
      requete  est RequêteHttp( buffer_req_http )
      requete.duree_lecture = duree_lecture
      
      
      uri_demandée est chaine = requete.get_uri()
      
      // pré-traitement
      si eve_avant_chaque_requete<>null ALORS
      	eve_avant_chaque_requete(requete, réponse)	
      	SI  réponse.reponse_renvoyée ALORS
      		retour
      	FIN
      FIN
      
      // si on a veut traiter par code cette uri
      si tab_eve_uri[uri_demandée].existe ALORS
      	// appel code pour cette uri dans lle thread principal
      	proc est une procédure = tab_eve_uri[uri_demandée]
      	ExécuteThreadPrincipal(	proc, requete, réponse)
      sinon
      	// gestion des répertoire virtuels
      	cherche_répertoire_virtuel(uri_demandée, réponse)	
      fin
      
      si PAS réponse.reponse_renvoyée ALORS
      	// uri non traitée
      	eve_requete_non_traitée(requete, réponse)
      FIN
      
      // si aucune réponse
      si pas réponse.reponse_renvoyée alors
      	// erreur 404
      	réponse.envoie_erreur_404()
      FIN
     type : 458752
   -
     name : cherche_répertoire_virtuel
     procedure_id : 1424527986520630878
     type_code : 12
     code : |1+
      procédure cherche_répertoire_virtuel( uri est chaine ANSI, réponse est un ReponseHttp)
      
      POUR TOUT répertoire_virtuel DE :tab_repertoire_virtuel
      	si répertoire_virtuel.gère_uri(uri) ALORS
      		// renvoyer le fichier
      		nom_fichier est chaine = répertoire_virtuel.nom_fichier_local(uri)
      		réponse.envoie_fichier(nom_fichier)
      		renvoyer vrai
      	FIN
      FIN
      renvoyer faux
     type : 458752
   -
     name : _lit_requete_brute
     procedure_id : 1424197819483172657
     type_code : 12
     code : |1+
      procédure PRIVÉE _lit_requete_brute(canal_http, duree_max est durée) : (buffer, durée)
      
      chrono_temp_lecture_requete est un Chrono
      chrono_temp_lecture_requete.Début()
      
      buffer_req_http est un Buffer 
      
      // lire l'entête http jusqu'au 2 RC
      SocketChangeModeTransmission(canal_http,SocketSansMarqueurFin)
      buffer_req_http =  SocketLit(canal_http,Faux,0)
      TANTQUE Position(buffer_req_http,marque_fin_header)<=0 
      	// si c'est du https
      	si Position(buffer_req_http,caract(0)>0) alors
      		SI eve_requete_invalide<>Null ALORS
      			eve_requete_invalide(buffer_req_http)
      		FIN
      		RENVOYER ("","non supporté")
      	FIN
      	
      	buffer_req_http +=  SocketLit(canal_http,Faux,0)
      	SI chrono_temp_lecture_requete > duree_max ALORS
      		RENVOYER ("", chrono_temp_lecture_requete.Valeur) // timeout
      	FIN	
      FIN
      
      // recherche la taille totale dans le header
      procédure interne _lit_taille()
      	// ex : "Content-Length: 88"
      	pos_taille est entier = position(buffer_req_http,sCONTENT_LENGTH)
      	SI pos_taille <= 0 ALORS
      		RENVOYER 0
      	FIN
      	// extrait la taille
      	pos_taille += Taille(sCONTENT_LENGTH)
      	TANTQUE buffer_req_http[pos_taille] = " " 
      		pos_taille++ // sauter les espaces
      	FIN
      	taille_ est entier = milieu( buffer_req_http, pos_taille)
      	SI taille_="" ALORS
      		RENVOYER  0
      	FIN
      	renvoyer taille_
      fin
      taille_message_body est une chaîne = _lit_taille()
      // si il n'y en a pas
      si taille_message_body = 0 ALORS
      	// terminé
      	renvoyer (buffer_req_http,chrono_temp_lecture_requete.Valeur)
      FIN
      
      // on a une partie apres l'entête
      // cas de POST par exemple
      
      // calcul taille totale attendue
      taille_message_totale est chaine = marque_fin_header+2*taille(rc)+taille_message_body
      
      // lire la fin du message
      TANTQUE taille(buffer_req_http)<taille_message_totale
      	buffer_req_http +=  SocketLit(canal_http,Faux,0)
      	SI chrono_temp_lecture_requete > duree_max ALORS
      		RENVOYER ("", chrono_temp_lecture_requete.Valeur) // timeout
      	FIN	
      FIN
      
      // OK
      renvoyer (buffer_req_http, chrono_temp_lecture_requete.Valeur)
      
     type : 458752
   -
     name : url_racine
     procedure_id : 1425246345580067758
     type_code : 12
     code : |1+
      // renvoie l'url racine pour se connecter au site
      // ex ! "http://132.51.15.42:8080"
      procédure url_racine( option est OPTION_url_racine <utile>) : chaine
      
      url est chaine = "http://"
      selon option
      	CAS ipv6
      		url += "["+NetAdresseIPv6()+"]"
      	cas ipv4
      		url +=  NetAdresseIP()
      	cas NomDeLaMachaine
      		url +=  NetNomMachine()
      	cas Localhost
      		url += "localhost"
      FIN
      // n° de port
      url += ":" + numéro_de__port
      url += "/"
      renvoyer url
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAAA6ih3UbgNXHwTtiPSFUEj+2fi/m7v4QV2rqidAupM=
  original_name : Classe1
resources :
 string_res :
  identifier : 0x13c3bdb0003914d2
  internal_properties : CAAAAAgAAAAnMYFQ1bL/vz9ehh7L22SNNSlIzGTOI8h5F/WtgDNP
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
